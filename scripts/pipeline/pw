#!/usr/bin/env bash

# call junctions matching statistics
# when redundant is set to true then we will run the pairwise comparison
# in both ways by calling junctions twice for x y and y x

# creates an $OUTPUT_DIR if it doesn't exist
# truncates the $OUT_FILE if it exists

# Default values
IN_DIR=""
OUT_FILE=""
OUT_DIR=""
REDUNDANT=false # run both ways
TIME=false

function handle_dirs {

    # check that $IN_DIR exists else exit with error
    if [ ! -d "$IN_DIR" ]; then
        echo "Input directory $IN_DIR does not exist."
        exit 1
    fi
    
    # extract output dir from the string $OUT_FILE
    # if the string contains a / then we need to extract the part after the last /
    # otherwise we just use the string as is
    if [[ $OUT_FILE == */* ]]; then
        # extract the part after the last /
        OUT_DIR=${OUT_FILE##*/}
    else
        OUT_DIR=$OUT_FILE
    fi

    # Create a directory to store junction results
    mkdir -p $OUT_DIR

}

function run_junctions {

    # Initialize an array to keep track of processed pairs
    processed_pairs=()

    # create the output directory if it doesn't exist
    handle_dirs

    # Clear the result file before starting
    > "$OUT_FILE"

    # Iterate through MSA files
    for msa_1 in "$IN_DIR"/*.msa; do
        for msa_2 in "$IN_DIR"/*.msa; do
            if [ "$msa_1" != "$msa_2" ]; then
                # Get the base filenames
                base_1=$(basename "$msa_1" .msa)
                base_2=$(basename "$msa_2" .msa)

                # check if redundant is true and if the pair has been processed
                if [ "$REDUNDANT" = false ] && [[ "${processed_pairs[@]}" =~ "$base_2-$base_1" ]]; then
                    continue
                fi

                # Check if the reverse pair has been processed
                #if ! [[ "${processed_pairs[@]}" =~ "$base_2-$base_1" ]]; then

                # Run junctions command with time and redirect output to the result file
                echo "Running junctions for $base_1 and $base_2" >> $OUT_FILE

                # if time is true then we will run the command with time
                # otherwise we will run it without time
                if [ "$TIME" = true ]; then
                    (/usr/bin/time -f"%S\t%M" junctions -g -s "$msa_1" "$msa_2" 2>&1) >> $OUT_FILE
                else
                    junctions -g -s "$msa_1" "$msa_2" >> $OUT_FILE
                fi
                
                #(/usr/bin/time -f"%S\t%M" junctions -g -s "$msa_1" "$msa_2" 2>&1) >> $OUT_FILE

                # if we don't require redundancy then
                # add the pair to the processed_pairs array
                if [ "$REDUNDANT" = false ]; then
                    processed_pairs+=("$base_1-$base_2")
                fi

                echo "Junctions computed for $base_1 and $base_2"
                #fi
            fi
        done
    done

    echo "All junctions computed."
}

# Define the cli function
cli() {

  # Define the usage message
  usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  -i, --in_dir      Input directory"
    echo "  -o, --out_file    Output file"
    echo "  -r, --redundant   Use redundant flag (optional)"
    echo "  -t, --time        use the /usr/bin/time utility to check time and space usage (optional)"
    echo "  -h, --help        Display this help message"
    echo "Example:"
    echo "  $0 -i input_dir -o output_file -r"
    exit 1
  }

  # Parse command-line options using getopt
  TEMP=$(getopt -o i:o:rth --long in_dir:,out_file:,redundant,time,help -- "$@")

  # Check for getopt errors
  if [ $? -ne 0 ]; then
    usage
  fi

  # Extract options and their arguments into variables
  eval set -- "$TEMP"
  while true; do
    case "$1" in
      -i | --in_dir)
        IN_DIR="$2"
        shift 2
        ;;
      -o | --out_file)
        OUT_FILE="$2"
        shift 2
        ;;
      -r | --redundant)
        REDUNDANT=true
        shift
        ;;
      -t | --time)
        TIME=true
        shift
        ;;
      -h | --help)
        usage
        ;;
      --)
        shift
        break
        ;;
      *)
        usage
        ;;
    esac
  done

  # Validate required options
  if [ -z "$IN_DIR" ] || [ -z "$OUT_FILE" ]; then
    echo "Error: Both --in_dir and --out_file are required."
    usage
  fi

  # Display the parsed options
  echo "Running junctions matching statistics script."
  echo "Parsed options:"
  # -e flag allows interpretation of backslash escapes
  echo -e "  Input Directory: $IN_DIR"
  echo -e "  Output File: $OUT_FILE"
  echo -e "  Redundant Flag: $REDUNDANT"
  echo -e "  Time Flag: $TIME"

  # call the run_junctions function
  run_junctions
}

# Call the cli function with command-line arguments
cli "$@"
